import {reactive} from "vue";
import {v4 as uuidv4} from 'uuid'
import type {GraphData} from "@antv/g6-core/lib/types";
import templateJson from '@/example/data.json'
import type {Point} from "@antv/g-base";

export interface ITask {
    name: string
    id: string
    dataIndex: number
    y: number
    children: string[]
}

export class Task implements ITask {
    name: string
    id: string
    dataIndex: number
    y: number
    children: string[]

    constructor(name: string, dataIndex: number, y: number, id: string = uuidv4(), children: string[] = []) {
        this.name = name;
        this.id = id;
        this.dataIndex = dataIndex;
        this.y = y;
        this.children = children;
    }

    toNode() {
        return {
            label: this.name,
            id: this.id,
            x: this.dataIndex * 120 + 60,
            y: this.y
        }
    }
}

export interface IProject {
    name: string
    id: string
    tasks: ITask[]
    createdTime: Date,
    offset: Point
}

export class Project implements IProject {
    name: string
    id: string
    tasks: ITask[]
    createdTime: Date
    offset: Point

    constructor(name: string, id: string = uuidv4(), tasks: Task[] = [],
                createdTime: Date = new Date(),
                offset: Point = {
                    x: 0,
                    y: 0
                }) {
        this.name = name;
        this.id = id;
        this.tasks = tasks;
        this.createdTime = createdTime;
        this.offset = offset
    }

    addTask(task: ITask) {
        this.tasks.push(task)
    }

    removeTask(taskId: string) {
        let tasks = this.tasks.filter(t => t.id == taskId)
        this.tasks.unshift(...tasks)
    }
}

export interface IModel {
    active: string,
    projects: Record<string, IProject>
    addProject: (name: string) => IProject
    addTask: (projectId: string, task: ITask) => void
    getProjectOffset: () => Point
    getCurrentProject: () => IProject | undefined
    getActiveGraphData: () => GraphData
    dataByDay: () => string[]
}

class Model implements IModel {
    active: string
    projects: Record<string, IProject>

    constructor(projects: Record<string, IProject> = {}, active: string = '') {
        this.projects = projects
        this.active = active
    }

    addProject(name: string) {
        let project: IProject = new Project(name)
        this.projects[project.id] = project
        return project
    }

    addTaskByName(projectId: string, taskName: string) {
        // let projects = this.projects.filter((project: IProject) => project.id === projectId);
        // projects
        this.projects[projectId]?.tasks.push(new Task(taskName, 3, 300))
        // if (projects.length === 1) {
        //     projects[0].tasks.push()
        // }
    }

    addTask(projectId: string, task: ITask) {
        // let projects = this.projects.filter((project: IProject) => project.id === projectId);
        // if (projects.length === 1) {
        //     projects[0].tasks.push(task)
        // }
        this.projects[projectId]?.tasks.push(task)
    }

    getCurrentProject() {
        return this.projects[this.active]
    }

    getProjectOffset() {
        // return this.projects.filter(p => p.id === this.active)?.[0]?.offset ?? {x: 0, y: 0}
        return this.projects[this.active]?.offset ?? {x: 0, y: 0}
    }

    setProjectOffset(dx: number, dy: number) {
        let originOffset = this.getProjectOffset()
        originOffset.x += dx
        originOffset.y += dy
    }

    setProjectPoint(x: number, y: number) {
        let originOffset = this.getProjectOffset()
        originOffset.x = x
        originOffset.y = y
    }

    /**
     * select data based on the project key and covert to data for antv g6
     */
    getActiveGraphData(): GraphData {
        console.log(this.projects)
        let project = this.projects[this.active]
        console.log('project', project)
        if (project === undefined) {
            return {
                nodes: [],
                edges: []
            }
        }
        // let project = projects[0]
        let tasks = project.tasks

        let edges = []
        for (let i in tasks) {
            let node = tasks[i]
            let children = node.children
            for (let j in children) {
                let edge = {
                    source: node.id,
                    target: children[j]
                }
                edges.push(edge)
            }
        }

        return {
            nodes: tasks.map((v) => {
                return {
                    id: v.id,
                    label: v.name,
                    x: v.dataIndex * 120 + 60,
                    y: v.y
                }
            }),
            edges
        }
    }

    dataByDay(day: number = 0) {
        let ans: string[] = []
        for (let key in this.projects) {
            let res = this.projects[key].tasks.filter((n: ITask) => n.dataIndex === day).map(v => v.name)
            ans.push(...res)
        }
        return ans
    }
}

let model1 = new Model();
console.log(model1)
let model = {...model1, ...templateJson}

console.log(model)

export default reactive(model)