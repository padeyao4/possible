/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Backlog
 */
export interface Backlog {
    /**
     * 
     * @type {string}
     * @memberof Backlog
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Backlog
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Backlog
     */
    'index'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Backlog
     */
    'status'?: boolean;
}
/**
 * 
 * @export
 * @interface DataStoreDto
 */
export interface DataStoreDto {
    /**
     * 
     * @type {Array<Edge>}
     * @memberof DataStoreDto
     */
    'edges'?: Array<Edge>;
    /**
     * 
     * @type {Array<Project>}
     * @memberof DataStoreDto
     */
    'projects'?: Array<Project>;
    /**
     * 
     * @type {Array<Node>}
     * @memberof DataStoreDto
     */
    'nodes'?: Array<Node>;
}
/**
 * 
 * @export
 * @interface Edge
 */
export interface Edge {
    /**
     * 
     * @type {string}
     * @memberof Edge
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Edge
     */
    'source'?: string;
    /**
     * 
     * @type {string}
     * @memberof Edge
     */
    'target'?: string;
    /**
     * 
     * @type {string}
     * @memberof Edge
     */
    'projectId'?: string;
}
/**
 * 
 * @export
 * @interface GrantedAuthority
 */
export interface GrantedAuthority {
    /**
     * 
     * @type {string}
     * @memberof GrantedAuthority
     */
    'authority'?: string;
}
/**
 * 
 * @export
 * @interface Node
 */
export interface Node {
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'projectId'?: string;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'record'?: string;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'index'?: number;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'w'?: number;
    /**
     * 
     * @type {number}
     * @memberof Node
     */
    'h'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Node
     */
    'status'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'type'?: NodeTypeEnum;
}

export const NodeTypeEnum = {
    Normal: 'NORMAL',
    Periodic: 'PERIODIC',
    TimeLimited: 'TIME_LIMITED'
} as const;

export type NodeTypeEnum = typeof NodeTypeEnum[keyof typeof NodeTypeEnum];

/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'index'?: number;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'createdAt'?: number;
}
/**
 * 
 * @export
 * @interface RestResponseDataStoreDto
 */
export interface RestResponseDataStoreDto {
    /**
     * 
     * @type {string}
     * @memberof RestResponseDataStoreDto
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof RestResponseDataStoreDto
     */
    'code'?: number;
    /**
     * 
     * @type {DataStoreDto}
     * @memberof RestResponseDataStoreDto
     */
    'payload'?: DataStoreDto;
}
/**
 * 
 * @export
 * @interface RestResponseListBacklog
 */
export interface RestResponseListBacklog {
    /**
     * 
     * @type {string}
     * @memberof RestResponseListBacklog
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof RestResponseListBacklog
     */
    'code'?: number;
    /**
     * 
     * @type {Array<Backlog>}
     * @memberof RestResponseListBacklog
     */
    'payload'?: Array<Backlog>;
}
/**
 * 
 * @export
 * @interface RestResponseString
 */
export interface RestResponseString {
    /**
     * 
     * @type {string}
     * @memberof RestResponseString
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof RestResponseString
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RestResponseString
     */
    'payload'?: string;
}
/**
 * 
 * @export
 * @interface RestResponseUser
 */
export interface RestResponseUser {
    /**
     * 
     * @type {string}
     * @memberof RestResponseUser
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof RestResponseUser
     */
    'code'?: number;
    /**
     * 
     * @type {User}
     * @memberof RestResponseUser
     */
    'payload'?: User;
}
/**
 * 
 * @export
 * @interface RestResponseVoid
 */
export interface RestResponseVoid {
    /**
     * 
     * @type {string}
     * @memberof RestResponseVoid
     */
    'message'?: string;
    /**
     * 
     * @type {number}
     * @memberof RestResponseVoid
     */
    'code'?: number;
    /**
     * 
     * @type {object}
     * @memberof RestResponseVoid
     */
    'payload'?: object;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'githubId'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof User
     */
    'attributes'?: { [key: string]: object; };
    /**
     * 
     * @type {Array<GrantedAuthority>}
     * @memberof User
     */
    'authorities'?: Array<GrantedAuthority>;
}

/**
 * AccountControllerApi - axios parameter creator
 * @export
 */
export const AccountControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountControllerApi - functional programming interface
 * @export
 */
export const AccountControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestResponseUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountControllerApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountControllerApi - factory interface
 * @export
 */
export const AccountControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: RawAxiosRequestConfig): AxiosPromise<RestResponseUser> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountControllerApi - object-oriented interface
 * @export
 * @class AccountControllerApi
 * @extends {BaseAPI}
 */
export class AccountControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountControllerApi
     */
    public getUser(options?: RawAxiosRequestConfig) {
        return AccountControllerApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BacklogControllerApi - axios parameter creator
 * @export
 */
export const BacklogControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<Backlog>} backlog 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add1: async (backlog: Array<Backlog>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backlog' is not null or undefined
            assertParamExists('add1', 'backlog', backlog)
            const localVarPath = `/backlog/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(backlog, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/backlog/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BacklogControllerApi - functional programming interface
 * @export
 */
export const BacklogControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BacklogControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<Backlog>} backlog 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add1(backlog: Array<Backlog>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.add1(backlog, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BacklogControllerApi.add1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestResponseListBacklog>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BacklogControllerApi.list1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BacklogControllerApi - factory interface
 * @export
 */
export const BacklogControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BacklogControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {Array<Backlog>} backlog 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add1(backlog: Array<Backlog>, options?: RawAxiosRequestConfig): AxiosPromise<RestResponseVoid> {
            return localVarFp.add1(backlog, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list1(options?: RawAxiosRequestConfig): AxiosPromise<RestResponseListBacklog> {
            return localVarFp.list1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BacklogControllerApi - object-oriented interface
 * @export
 * @class BacklogControllerApi
 * @extends {BaseAPI}
 */
export class BacklogControllerApi extends BaseAPI {
    /**
     * 
     * @param {Array<Backlog>} backlog 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BacklogControllerApi
     */
    public add1(backlog: Array<Backlog>, options?: RawAxiosRequestConfig) {
        return BacklogControllerApiFp(this.configuration).add1(backlog, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BacklogControllerApi
     */
    public list1(options?: RawAxiosRequestConfig) {
        return BacklogControllerApiFp(this.configuration).list1(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DataStoreControllerApi - axios parameter creator
 * @export
 */
export const DataStoreControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DataStoreDto} dataStoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add: async (dataStoreDto: DataStoreDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataStoreDto' is not null or undefined
            assertParamExists('add', 'dataStoreDto', dataStoreDto)
            const localVarPath = `/data/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dataStoreDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/data/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataStoreControllerApi - functional programming interface
 * @export
 */
export const DataStoreControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataStoreControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DataStoreDto} dataStoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add(dataStoreDto: DataStoreDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.add(dataStoreDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataStoreControllerApi.add']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestResponseDataStoreDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataStoreControllerApi.list']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DataStoreControllerApi - factory interface
 * @export
 */
export const DataStoreControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataStoreControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {DataStoreDto} dataStoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add(dataStoreDto: DataStoreDto, options?: RawAxiosRequestConfig): AxiosPromise<RestResponseVoid> {
            return localVarFp.add(dataStoreDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: RawAxiosRequestConfig): AxiosPromise<RestResponseDataStoreDto> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataStoreControllerApi - object-oriented interface
 * @export
 * @class DataStoreControllerApi
 * @extends {BaseAPI}
 */
export class DataStoreControllerApi extends BaseAPI {
    /**
     * 
     * @param {DataStoreDto} dataStoreDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataStoreControllerApi
     */
    public add(dataStoreDto: DataStoreDto, options?: RawAxiosRequestConfig) {
        return DataStoreControllerApiFp(this.configuration).add(dataStoreDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataStoreControllerApi
     */
    public list(options?: RawAxiosRequestConfig) {
        return DataStoreControllerApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InfoControllerApi - axios parameter creator
 * @export
 */
export const InfoControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        version: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/info/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InfoControllerApi - functional programming interface
 * @export
 */
export const InfoControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InfoControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async version(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.version(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InfoControllerApi.version']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InfoControllerApi - factory interface
 * @export
 */
export const InfoControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InfoControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        version(options?: RawAxiosRequestConfig): AxiosPromise<RestResponseString> {
            return localVarFp.version(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InfoControllerApi - object-oriented interface
 * @export
 * @class InfoControllerApi
 * @extends {BaseAPI}
 */
export class InfoControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InfoControllerApi
     */
    public version(options?: RawAxiosRequestConfig) {
        return InfoControllerApiFp(this.configuration).version(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestControllerApi - axios parameter creator
 * @export
 */
export const TestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestControllerApi - functional programming interface
 * @export
 */
export const TestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestControllerApi.hello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TestControllerApi - factory interface
 * @export
 */
export const TestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hello(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.hello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestControllerApi - object-oriented interface
 * @export
 * @class TestControllerApi
 * @extends {BaseAPI}
 */
export class TestControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestControllerApi
     */
    public hello(options?: RawAxiosRequestConfig) {
        return TestControllerApiFp(this.configuration).hello(options).then((request) => request(this.axios, this.basePath));
    }
}



